{
    "Mappings": {
        "RegionMap": {
            "ap-northeast-1": {
                "AMI": "ami-f58c6f93"
            },
            "us-west-1": {
                "AMI": "ami-d8d0f8b8"
            }
        }
    },
    "Parameters": {
        "ClusterSize": {
            "Default": "3",
            "Description": "Number of instances to launch",
            "Type": "Number"
        },
        "InstanceType": {
            "AllowedValues": [
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "t2.2xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "r4.large",
                "r4.xlarge",
                "r4.2xlarge",
                "r4.4xlarge",
                "r4.8xlarge",
                "r4.16xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type",
            "Default": "m4.large",
            "Description": "Dashbase EC2 instance type",
            "Type": "String"
        },
        "VolumeSize": {
            "Default": "500",
            "Description": "size of EBS volume in GB, min 500gb for standard types",
            "Type": "Number"
        },
        "VolumeType": {
            "AllowedValues": [
                "st1",
                "sc1",
                "gp2"
            ],
            "ConstraintDescription": "must be a valid EBS volume type",
            "Default": "st1",
            "Description": "Dashbase mnt EBS volume type",
            "Type": "String"
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "SSHLocation": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Default": "0.0.0.0/0",
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        },
        "Subnets": {
            "Description": "List of VPC subnet IDs for the cluster. Note: must match up with the passed AvailabilityZones.",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "VpcId": {
            "Description": "VPC associated with the provided subnets",
            "Type": "AWS::EC2::VPC::Id"
        }
    },
    "Resources": {
        "DashbaseSecurityGroup": {
            "Properties": {
                "GroupDescription": "Enable SSH access",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        },
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "LaunchConfig": {
            "Properties": {
                "AssociatePublicIpAddress": "true",
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SecurityGroups": [
                    {
                        "Ref": "DashbaseSecurityGroup"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sdk",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/usr/bin/env bash \necho ###BEGIN_USERDATA### \npvcreate /dev/xvdk\nvgcreate vg0 /dev/xvdk\nlvcreate -l 100%FREE -n dashbase vg0\nmkfs.ext4 /dev/vg0/dashbase\nmkdir /mnt/dashbase\necho /dev/mapper/vg0-dashbase /mnt/dashbase ext4 defaults 0 2 >> /etc/fstab\nmount -a\nchown -R ec2-user:ec2-user /mnt/dashbase/\n/opt/aws/bin/cfn-signal -e 0 -r \"Stack setup complete\"\n!Ref WaitHandle \n|+ \n'#EOF'\n"
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "ServerGroup": {
            "Properties": {
                "AvailabilityZones": {
                    "Fn::GetAZs": "AWS::Region"
                },
                "DesiredCapacity": {
                    "Ref": "ClusterSize"
                },
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfig"
                },
                "MaxSize": 99,
                "MinSize": 1,
                "Tags": [
                    {
                        "Key": "role",
                        "PropagateAtLaunch": "true",
                        "Value": "Dashbase"
                    }
                ],
                "VPCZoneIdentifier": {
                    "Ref": "Subnets"
                }
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }
    }
}